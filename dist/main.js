(()=>{"use strict";var e={299:(e,t,n)=>{n.d(t,{Z:()=>l});var o=n(15),r=n.n(o),i=n(645),s=n.n(i)()(r());s.push([e.id,".main{min-height:calc(100vh - 49.6px)}.nodec:hover{text-decoration:none}a:hover h5:hover{background-color:#378061;border-radius:10px;padding:3px 0;text-decoration:none}.strikethrough{text-decoration:line-through;text-shadow:0 0 8px #444}","",{version:3,sources:["webpack://./src/stylesheet.scss"],names:[],mappings:"AAEA,MACE,+BAAA,CAGF,aACE,oBAAA,CAGF,iBACE,wBAAA,CAGA,kBAAA,CACA,aAAA,CACA,oBAAA,CAGF,eACE,4BAAA,CACA,wBAAA",sourcesContent:['// @import "bootstrap";\n\n.main {\n  min-height: calc(100vh - 49.6px);\n}\n\n.nodec:hover {\n  text-decoration: none;\n}\n\na:hover h5:hover {\n  background-color: rgb(55, 128, 97);\n\n  /* cursor: pointer; */\n  border-radius: 10px;\n  padding: 3px 0;\n  text-decoration: none;\n}\n\n.strikethrough {\n  text-decoration: line-through;\n  text-shadow: 0 0 8px #444;\n}\n'],sourceRoot:""}]);const l=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(r[s]=!0)}for(var l=0;l<e.length;l++){var a=[].concat(e[l]);o&&r[a[0]]||(n&&(a[2]?a[2]="".concat(n," and ").concat(a[2]):a[2]=n),t.push(a))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,r=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],o=!0,r=!1,i=void 0;try{for(var s,l=e[Symbol.iterator]();!(o=(s=l.next()).done)&&(n.push(s.value),!t||n.length!==t);o=!0);}catch(e){r=!0,i=e}finally{try{o||null==l.return||l.return()}finally{if(r)throw i}}return n}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],s=r[3];if("function"==typeof btoa){var l=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),c="/*# ".concat(a," */"),d=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[i].concat(d).concat([c]).join("\n")}return[i].join("\n")}},379:(e,t,n)=>{var o,r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function s(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},o=[],r=0;r<e.length;r++){var l=e[r],a=t.base?l[0]+t.base:l[0],c=n[a]||0,d="".concat(a," ").concat(c);n[a]=c+1;var u=s(d),m={css:l[1],media:l[2],sourceMap:l[3]};-1!==u?(i[u].references++,i[u].updater(m)):i.push({identifier:d,updater:f(m,t),references:1}),o.push(d)}return o}function a(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var s=r(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var c,d=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function u(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=d(t,r);else{var i=document.createTextNode(r),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}function m(e,t,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var p=null,h=0;function f(e,t){var n,o,r;if(t.singleton){var i=h++;n=p||(p=a(t)),o=u.bind(null,n,i,!1),r=u.bind(null,n,i,!0)}else n=a(t),o=m.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=s(n[o]);i[r].references--}for(var a=l(e,t),c=0;c<n.length;c++){var d=s(n[c]);0===i[d].references&&(i[d].updater(),i.splice(d,1))}n=a}}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={};n.r(e),n.d(e,{dateedit:()=>U,descriptionedit:()=>R,dom:()=>V,listoflist1:()=>O,readRadios1edit:()=>J,taskedit:()=>D});var t=n(379),o=n.n(t),r=n(299);o()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;const i=document.querySelector("#list-display"),s=document.querySelector("#edit-form-display"),l=document.querySelector("#defaultlist"),a=document.querySelector("#form-display"),c=document.getElementById("list"),d=document.querySelectorAll(".radiobtn"),u=document.querySelector("#task"),m=document.querySelector("#description"),p=document.querySelector("#date"),h=document.querySelectorAll(".radiobtnedit"),f=document.getElementById("taskedit"),g=document.getElementById("descriptionedit"),v=document.getElementById("dateedit"),b=()=>{let e=[];return localStorage.getItem("liststore")&&(e=JSON.parse(localStorage.liststore)),e};function y(e){e.preventDefault(),window.location.reload()}const S=(e,t,n)=>{n[e].todos.splice(t,1)},E=(e,t,n)=>{e[t].todos[n].status=!1},A=(e,t,n)=>{e[t].todos[n].status=!0};class C{constructor(e){this.list=e,this.todos=[]}}function k(e,t,n,o,r){this.date=e,this.task=t,this.description=n,this.priority=o,this.status=r}const L=e=>{const t=b(),n=new C(c.value);t.push(n),localStorage.setItem("liststore",JSON.stringify(t)),y(e)},I=e=>{const t=b();if(localStorage.getItem("selectedlist")){let n;for(let e=0;e<3;e+=1)if(!0===d[e].checked){n=d[e].value;break}const o=new k(p.value,u.value,m.value,n,!1);for(let e=0;e<t.length;e+=1){const n=localStorage.getItem("selectedlist");if(t[e].list===n){t[e].todos.push(o),localStorage.setItem("liststore",JSON.stringify(t));break}}y(e)}},x=document.querySelector("#form-btn"),w=document.querySelector("#form-display"),M=document.querySelector("#task-btn"),T=document.querySelector("#list-display"),B=document.querySelector("#refresh-btn"),O=document.querySelectorAll(".listoflist"),j=document.getElementById("currentclassname"),H=document.getElementById("defaultlist"),q=document.getElementById("tommorrowlist"),N=document.getElementById("todaylist"),J=document.querySelectorAll(".radiobtnedit"),D=document.getElementById("taskedit"),R=document.getElementById("descriptionedit"),U=document.getElementById("dateedit"),P=document.getElementById("canceledittask"),F=document.getElementById("cancellist"),G=document.getElementById("editingform"),_=document.getElementById("cancelcreatetask"),Z=document.getElementById("form-display"),V=()=>{F.addEventListener("click",(()=>{T.classList.add("d-none")})),P.addEventListener("click",(()=>{G.classList.add("d-none")})),_.addEventListener("click",(()=>{Z.classList.add("d-none")})),x.addEventListener("click",(()=>{localStorage.getItem("selectedlist")?w.classList.contains("d-none")?w.classList.remove("d-none"):w.classList.add("d-none"):$("#myModal").modal("show")})),M.addEventListener("click",(()=>{T.classList.contains("d-none")?T.classList.remove("d-none"):T.classList.add("d-none")})),B.addEventListener("click",(()=>{if(localStorage.getItem("selectedlist"))for(localStorage.removeItem("selectedlist"),localStorage.removeItem("selectedtask");j.lastElementChild;)j.removeChild(j.lastChild)}));const e=e=>{let t=e.target.previousSibling.id;t=t.slice(-1);const n=b();if(n.splice(t,1),localStorage.setItem("liststore",JSON.stringify(n)),e.target.parentElement.remove(),localStorage.getItem("selectedlist")===e.target.previousSibling.innerHTML.trim())for(localStorage.removeItem("selectedlist");j.lastElementChild;)j.removeChild(j.lastChild)},t=e=>{const t=b(),n=localStorage.getItem("selectedlist");for(let o=0;o<t.length;o+=1)if(t[o].list===n){let n=e.target.parentElement.parentElement.id;n=n.slice(-1),S(o,n,t),localStorage.setItem("liststore",JSON.stringify(t)),window.location.reload();break}e.target.parentElement.parentElement.remove()},n=e=>{if(G.classList.contains("d-none")){const t=e.target.parentElement.parentElement.id.slice(-1);localStorage.setItem("selectedtask",t),G.classList.remove("d-none");for(let t=0;t<3;t+=1)if(J[t].value===e.target.parentElement.previousSibling.innerHTML){J[t].checked=!0;break}D.value=e.target.parentElement.previousSibling.previousSibling.previousSibling.previousSibling.innerHTML,R.value=e.target.parentElement.previousSibling.previousSibling.previousSibling.innerHTML,U.value=e.target.parentElement.previousSibling.previousSibling.innerHTML}else G.classList.add("d-none"),localStorage.removeItem("selectedtask")},o=e=>{const t=b(),n=e.target.parentElement.parentElement,o=n.id.slice(-1),r=localStorage.getItem("selectedlist");if(e.target.checked){n.classList.add("strikethrough");for(let e=0;e<t.length;e+=1)if(t[e].list===r){A(t,e,o),localStorage.setItem("liststore",JSON.stringify(t));break}}else{n.classList.remove("strikethrough");for(let e=0;e<t.length;e+=1)if(t[e].list===r){E(t,e,o),localStorage.setItem("liststore",JSON.stringify(t));break}}},r=(e,r,i,s,l=1)=>{const a=document.createElement("tr");a.setAttribute("id",`task${i}`),a.setAttribute("class","text-center");const c=e[r].todos[i],d=document.createElement("th");if(1===l){a.appendChild(d);const e=document.createElement("input");e.addEventListener("click",o),d.appendChild(e),e.setAttribute("scope","row"),e.setAttribute("type","checkbox"),e.setAttribute("class","form-check-input taskdone"),c.status&&(e.checked=!0)}const u=document.createElement("td");a.appendChild(u),u.innerHTML=c.task;const m=document.createElement("td");a.appendChild(m),m.innerHTML=c.description;const p=document.createElement("td");a.appendChild(p),p.innerHTML=c.date;const h=document.createElement("td");if(h.innerHTML=c.priority,a.appendChild(h),1===l){const e=document.createElement("td");a.appendChild(e);const o=document.createElement("button");o.addEventListener("click",n),e.appendChild(o),o.setAttribute("class","btn btn-primary edittask"),o.innerHTML="Edit";const r=document.createElement("td");a.appendChild(r);const i=document.createElement("button");i.addEventListener("click",t),r.appendChild(i),i.setAttribute("class","btn btn-danger deltask"),i.innerHTML="Delete",c.status&&a.classList.add("strikethrough")}s.appendChild(a)},i=()=>{if(localStorage.getItem("selectedlist")){for(;j.lastElementChild;)j.removeChild(j.lastChild);const e=document.createElement("h4");j.appendChild(e),e.setAttribute("class","text-center text-dark mb-4"),e.innerHTML=localStorage.selectedlist,(e=>{x.classList.remove("d-none");const t=b(),n=document.createElement("table");j.appendChild(n),n.setAttribute("class","table table-stripped text-dark container pt-5");const o=document.createElement("thead"),i=document.createElement("tr");o.setAttribute("class","text-center"),i.innerHTML='  <th scope="column">Status</th>\n                    <th>Task</th>\n                    <th>Description</th>\n                    <th>Date</th>\n                    <th>Priority</th> \n                    <th>Update</th>\n                    <th>Remove</th>',o.appendChild(i),n.appendChild(o);const s=document.createElement("tbody");n.appendChild(s);for(let n=0;n<t.length;n+=1)if(t[n].list===e)for(let e=0;e<t[n].todos.length;e+=1)r(t,n,e,s)})(localStorage.getItem("selectedlist"))}},s=e=>{const t=e.target.textContent.trim();localStorage.setItem("selectedlist",t),i()},l=e=>{for(x.classList.add("d-none");j.lastElementChild;)j.removeChild(j.lastChild);const t=document.createElement("h4");j.appendChild(t),t.setAttribute("class","text-center text-dark mb-4"),t.innerHTML=e.target.textContent.trim(),localStorage.removeItem("selectedlist"),(e=>{const t=b(),n=document.createElement("table");j.appendChild(n),n.setAttribute("class","table table-stripped text-dark container pt-5");const o=document.createElement("thead");n.appendChild(o);const i=document.createElement("tr");o.setAttribute("class","text-center"),o.appendChild(i),i.innerHTML='  <th scope="column">Task</th>\n    <th scope="column">Description</th>\n                    <th>Date</th>\n                    <th>Priority</th> \n            ';const s=document.createElement("tbody");n.appendChild(s);for(let n=0;n<t.length;n+=1)for(let o=0;o<t[n].todos.length;o+=1){const i=t[n].todos[o].date,{status:l}=t[n].todos[o],a=new Date(i),c=(new Date-a)/864e5;("Tomorrow - [View-Only]"===e&&c<0&&c>-1.1&&!1===l||"Today - [View-Only]"===e&&c>=0&&c<=1&&!1===l)&&r(t,n,o,s,e)}})(e.target.textContent.trim())};H.addEventListener("click",s),N.addEventListener("click",l),q.addEventListener("click",l),i(),(()=>{if(localStorage.getItem("liststore")){const t=JSON.parse(localStorage.liststore),n=document.querySelector("#listoftodos");for(let o=1;o<t.length;o+=1){const r=document.createElement("a");r.setAttribute("href","#"),r.setAttribute("class","d-flex my-2 justify-content-center nodec");const i=document.createElement("h5");r.appendChild(i),i.addEventListener("click",s),i.setAttribute("id",`projectlist${o}`),i.setAttribute("class","text-white p-2 w-50 text-center listoflist"),i.innerHTML=`\n                     ${t[o].list} \n                  \n                    `;const l=document.createElement("button");l.addEventListener("click",e),r.appendChild(l),l.setAttribute("class","btn btn-danger  btn-sm"),l.innerHTML="Delete",n.appendChild(r)}}})()};V(),(e=>{const t=[];if(!localStorage.getItem("liststore")){const e=new C(l.textContent);t.push(e),localStorage.setItem("liststore",JSON.stringify(t))}i.addEventListener("submit",L),a.addEventListener("submit",I),s.addEventListener("submit",(t=>{(function(e=!1){const t=b();if(localStorage.getItem("selectedlist")){let e;for(let t=0;t<3;t+=1)if(!0===h[t].checked){e=h[t].value;break}const n=localStorage.getItem("selectedlist");for(let o=0;o<t.length;o+=1)if(t[o].list===n){const n=localStorage.getItem("selectedtask");t[o].todos[n].task=f.value,t[o].todos[n].date=v.value,t[o].todos[n].description=g.value,t[o].todos[n].priority=e,localStorage.setItem("liststore",JSON.stringify(t));break}}y(e)})(e),e.dom()})),a.reset(),i.reset()})(e)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,