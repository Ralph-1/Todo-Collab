(()=>{"use strict";var e={571:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(15),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n#tasks {\n  border-left: 2px black solid;\n  min-height: 300px;\n  padding: 5px 10px;\n}\n\n.containers {\n  display: grid;\n  grid-template-columns: 0.5fr 2fr;\n  column-gap: 2em;\n}\n\n#task_form {\n  display: none;\n  padding: 10px;\n}\n\n#task_body {\n  display: flex;\n  flex-direction: column;\n  font-size: 18px;\n  padding: 5px;\n}\n\n.check_box {\n  padding: 5px;\n  margin-left: 10px;\n}\n","",{version:3,sources:["webpack://./src/stylesheet/main.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;AACxB;;AAEA;EACE,4BAA4B;EAC5B,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,gCAAgC;EAChC,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,eAAe;EACf,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,iBAAiB;AACnB",sourcesContent:["* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n#tasks {\n  border-left: 2px black solid;\n  min-height: 300px;\n  padding: 5px 10px;\n}\n\n.containers {\n  display: grid;\n  grid-template-columns: 0.5fr 2fr;\n  column-gap: 2em;\n}\n\n#task_form {\n  display: none;\n  padding: 10px;\n}\n\n#task_body {\n  display: flex;\n  flex-direction: column;\n  font-size: 18px;\n  padding: 5px;\n}\n\n.check_box {\n  padding: 5px;\n  margin-left: 10px;\n}\n"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&a[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,a=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,a=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(a)throw o}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),d=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[o].concat(d).concat([l]).join("\n")}return[o].join("\n")}},379:(e,t,n)=>{var r,a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function i(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],a=0;a<e.length;a++){var s=e[a],c=t.base?s[0]+t.base:s[0],l=n[c]||0,d="".concat(c," ").concat(l);n[c]=l+1;var u=i(d),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(o[u].references++,o[u].updater(p)):o.push({identifier:d,updater:g(p,t),references:1}),r.push(d)}return r}function c(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var l,d=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function u(e,t,n,r){var a=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function p(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var f=null,m=0;function g(e,t){var n,r,a;if(t.singleton){var o=m++;n=f||(f=c(t)),r=u.bind(null,n,o,!1),a=u.bind(null,n,o,!0)}else n=c(t),r=p.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var a=i(n[r]);o[a].references--}for(var c=s(e,t),l=0;l<n.length;l++){var d=i(n[l]);0===o[d].references&&(o[d].updater(),o.splice(d,1))}n=c}}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{const e=e=>{localStorage.setItem("listOfProjects",JSON.stringify(e)),C()},t=e=>{localStorage.setItem("selectedProjectId",JSON.stringify(e)),C()},r=document.getElementById("new_project_input"),a=document.getElementById("project_form"),o=document.getElementById("data-projects"),i=document.getElementById("data-default-project"),s=document.getElementById("task_title"),c=document.getElementById("task_count"),l=document.getElementById("task_list"),d=document.getElementById("task_body"),u=document.getElementById("tasks"),p=document.getElementById("task_form"),f=document.getElementById("new_task_button"),m=document.getElementById("cancel_task_button"),g=document.getElementById("new_task_input"),A=document.getElementById("date"),y=document.getElementById("priority_dropdown");let v,b=[];i.addEventListener("click",(e=>{e.target.classList.add("active"),s.textContent="Default Project",c.textContent=null})),p.addEventListener("submit",(n=>{n.preventDefault(),n.target.style.display="none",f.style.display="block";const r=g.value;if(null==r||""===r)return;const a=(o=r,{id:Date.now().toString(),item:o,date:A.value,priority:y.value,complete:!1});var o;g.value="",b.find((e=>e.id===v)).tasks.push(a),e(b),t(v),n.target.reset()}));const h=e=>{const t=e.tasks.filter((e=>!e.complete)).length;let n="";n=1===t?"task":"tasks",c.textContent=`${t} ${n} remaining`};o.addEventListener("click",(n=>{var r;v=n.target.getAttribute("data-key"),t(v),n.target.classList.contains("delete_project")&&(r=n.target.parentElement.getAttribute("data-key"),b=b.filter((e=>e.id!==r)),s.textContent="Select or Create a new project",c.textContent=null,e(b),i.classList.add("active"))})),l.addEventListener("click",(n=>{if("input"===n.target.tagName.toLowerCase()){const r=b.find((e=>e.id===v));r.tasks.find((e=>e.id===n.target.id)).complete=n.target.checked,e(b),t(v),h(r)}})),f.addEventListener("click",(e=>{e.target.style.display="none",p.style.display="block",u.appendChild(l)})),m.addEventListener("click",(()=>{p.style.display="none",f.style.display="block",p.reset()}));const E=()=>{(e=>{for(;e.childNodes[2];)e.removeChild(e.childNodes[2])})(o),(e=>{for(;e.firstChild;)e.removeChild(e.firstChild)})(d),b.forEach((e=>{const t=document.createElement("li");t.setAttribute("data-key",e.id),t.classList.add("new_project"),t.innerHTML=`${e.item} <button class="delete_project text-white bg-danger btn"><i class="fas fa-trash-alt"></i></button><br /><br />`,e.id===v&&(t.classList.add("active"),i.classList.remove("active")),o.appendChild(t)})),(()=>{const e=b.find((e=>e.id===v));v&&(s.textContent=e.item,h(e),e.tasks.forEach((e=>{const t=document.createElement("input");t.setAttribute("type","checkbox"),t.setAttribute("class","check_box"),t.id=e.id,t.checked=e.complete;const n=document.createElement("label");n.className="my-3 w-50",n.htmlFor=e.id,n.innerHTML=`<span class="font-weight-bold">Task Descrition:</span> ${e.item}<br/>\n        <span class="font-weight-bold">Task Date:</span> ${e.date}<br/> \n        <span class="font-weight-bold">Task Priority:</span> ${e.priority}`,n.appendChild(t),d.appendChild(n),l.appendChild(d)})))})()};a.addEventListener("submit",(n=>{if(n.preventDefault(),null===r.value||""===r.value)return;const a=(o=r.value,{id:Date.now().toString(),item:o,tasks:[]});var o;r.value=null,b.push(a),e(b),t(v),E()})),(()=>{const e=localStorage.getItem("listOfProjects"),t=localStorage.getItem("selectedProjectId");e&&(b=JSON.parse(e),E()),t&&(v=JSON.parse(t),E())})();const C=E;var x=n(379),k=n.n(x),B=n(571);k()(B.Z,{insert:"head",singleton:!1}),B.Z.locals,C()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,