(()=>{"use strict";var e={299:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(15),r=n.n(o),i=n(645),s=n.n(i)()(r());s.push([e.id,".main{min-height:calc(100vh - 49.6px)}.nodec:hover{text-decoration:none}a:hover h5:hover{background-color:#378061;border-radius:10px;padding:3px 0;text-decoration:none}.strikethrough{text-decoration:line-through;text-shadow:0 0 8px #444}","",{version:3,sources:["webpack://./src/stylesheet.scss"],names:[],mappings:"AAEA,MACE,+BAAA,CAGF,aACE,oBAAA,CAGF,iBACE,wBAAA,CAGA,kBAAA,CACA,aAAA,CACA,oBAAA,CAGF,eACE,4BAAA,CACA,wBAAA",sourcesContent:['// @import "bootstrap";\n\n.main {\n  min-height: calc(100vh - 49.6px);\n}\n\n.nodec:hover {\n  text-decoration: none;\n}\n\na:hover h5:hover {\n  background-color: rgb(55, 128, 97);\n\n  /* cursor: pointer; */\n  border-radius: 10px;\n  padding: 3px 0;\n  text-decoration: none;\n}\n\n.strikethrough {\n  text-decoration: line-through;\n  text-shadow: 0 0 8px #444;\n}\n'],sourceRoot:""}]);const a=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(r[s]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);o&&r[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e.exports=function(e){var n,o,r=(o=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],o=!0,r=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(o=(s=a.next()).done)&&(n.push(s.value),!t||n.length!==t);o=!0);}catch(e){r=!0,i=e}finally{try{o||null==a.return||a.return()}finally{if(r)throw i}}return n}}(n,o)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(e,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],s=r[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(l," */"),d=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[i].concat(d).concat([c]).join("\n")}return[i].join("\n")}},379:(e,t,n)=>{var o,r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function s(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function a(e,t){for(var n={},o=[],r=0;r<e.length;r++){var a=e[r],l=t.base?a[0]+t.base:a[0],c=n[l]||0,d="".concat(l," ").concat(c);n[l]=c+1;var u=s(d),m={css:a[1],media:a[2],sourceMap:a[3]};-1!==u?(i[u].references++,i[u].updater(m)):i.push({identifier:d,updater:f(m,t),references:1}),o.push(d)}return o}function l(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var s=r(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var c,d=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function u(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=d(t,r);else{var i=document.createTextNode(r),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}function m(e,t,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var p=null,h=0;function f(e,t){var n,o,r;if(t.singleton){var i=h++;n=p||(p=l(t)),o=u.bind(null,n,i,!1),r=u.bind(null,n,i,!0)}else n=l(t),o=m.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=s(n[o]);i[r].references--}for(var l=a(e,t),c=0;c<n.length;c++){var d=s(n[c]);0===i[d].references&&(i[d].updater(),i.splice(d,1))}n=l}}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),o=n(299);t()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;const r=document.querySelector("#list-display"),i=document.querySelector("#edit-form-display"),s=document.querySelector("#defaultlist"),a=document.querySelector("#form-display"),l=document.getElementById("list"),c=document.querySelectorAll(".radiobtn"),d=document.querySelector("#task"),u=document.querySelector("#description"),m=document.querySelector("#date"),p=()=>{let e=[];return localStorage.getItem("liststore")&&(e=JSON.parse(localStorage.liststore)),e},h=(e,t,n)=>{n[e].todos.splice(t,1),localStorage.setItem("liststore",JSON.stringify(n)),window.location.reload()},f=(e,t,n)=>{e[t].todos[n].status=!1,localStorage.setItem("liststore",JSON.stringify(e))},g=(e,t,n)=>{e[t].todos[n].status=!0,localStorage.setItem("liststore",JSON.stringify(e))};class v{constructor(e){this.list=e,this.todos=[]}}function b(e,t,n,o,r){this.date=e,this.task=t,this.description=n,this.priority=o,this.status=r}const y=e=>{const t=p(),n=new v(l.value);t.push(n),localStorage.setItem("liststore",JSON.stringify(t)),e.preventDefault(),window.location.reload()},S=e=>{const t=p();if(localStorage.getItem("selectedlist")){let e;for(let t=0;t<3;t+=1)if(!0===B[t].checked){e=B[t].value;break}const n=localStorage.getItem("selectedlist");for(let o=0;o<t.length;o+=1)if(t[o].list===n){const n=localStorage.getItem("selectedtask");t[o].todos[n].task=O.value,t[o].todos[n].date=j.value,t[o].todos[n].description=H.value,t[o].todos[n].priority=e,localStorage.setItem("liststore",JSON.stringify(t));break}U()}e.preventDefault(),window.location.reload()},E=e=>{const t=p();if(localStorage.getItem("selectedlist")){let n;for(let e=0;e<3;e+=1)if(!0===c[e].checked){n=c[e].value;break}const o=new b(m.value,d.value,u.value,n,!1);for(let e=0;e<t.length;e+=1){const n=localStorage.getItem("selectedlist");if(t[e].list===n){t[e].todos.push(o),localStorage.setItem("liststore",JSON.stringify(t));break}}e.preventDefault(),window.location.reload()}},A=document.querySelector("#form-btn"),C=document.querySelector("#form-display"),k=document.querySelector("#task-btn"),L=document.querySelector("#list-display"),I=document.querySelector("#refresh-btn"),x=(document.querySelectorAll(".listoflist"),document.getElementById("currentclassname")),w=document.getElementById("defaultlist"),M=document.getElementById("tommorrowlist"),T=document.getElementById("todaylist"),B=document.querySelectorAll(".radiobtnedit"),O=document.getElementById("taskedit"),H=document.getElementById("descriptionedit"),j=document.getElementById("dateedit"),q=document.getElementById("canceledittask"),N=document.getElementById("cancellist"),D=document.getElementById("editingform"),J=document.getElementById("cancelcreatetask"),R=document.getElementById("form-display"),U=()=>{N.addEventListener("click",(()=>{L.classList.add("d-none")})),q.addEventListener("click",(()=>{D.classList.add("d-none")})),J.addEventListener("click",(()=>{R.classList.add("d-none")})),A.addEventListener("click",(()=>{localStorage.getItem("selectedlist")?C.classList.contains("d-none")?C.classList.remove("d-none"):C.classList.add("d-none"):$("#myModal").modal("show")})),k.addEventListener("click",(()=>{L.classList.contains("d-none")?L.classList.remove("d-none"):L.classList.add("d-none")})),I.addEventListener("click",(()=>{if(localStorage.getItem("selectedlist"))for(localStorage.removeItem("selectedlist"),localStorage.removeItem("selectedtask");x.lastElementChild;)x.removeChild(x.lastChild)}));const e=e=>{let t=e.target.previousSibling.id;t=t.slice(-1);const n=p();if(n.splice(t,1),localStorage.setItem("liststore",JSON.stringify(n)),e.target.parentElement.remove(),localStorage.getItem("selectedlist")===e.target.previousSibling.innerHTML.trim())for(localStorage.removeItem("selectedlist");x.lastElementChild;)x.removeChild(x.lastChild)},t=e=>{const t=p(),n=localStorage.getItem("selectedlist");for(let o=0;o<t.length;o+=1)if(t[o].list===n){let n=e.target.parentElement.parentElement.id;n=n.slice(-1),h(o,n,t);break}e.target.parentElement.parentElement.remove()},n=e=>{if(D.classList.contains("d-none")){const t=e.target.parentElement.parentElement.id.slice(-1);localStorage.setItem("selectedtask",t),D.classList.remove("d-none");for(let t=0;t<3;t+=1)if(B[t].value===e.target.parentElement.previousSibling.innerHTML){B[t].checked=!0;break}O.value=e.target.parentElement.previousSibling.previousSibling.previousSibling.previousSibling.innerHTML,H.value=e.target.parentElement.previousSibling.previousSibling.previousSibling.innerHTML,j.value=e.target.parentElement.previousSibling.previousSibling.innerHTML}else D.classList.add("d-none"),localStorage.removeItem("selectedtask")},o=e=>{const t=p(),n=e.target.parentElement.parentElement,o=n.id.slice(-1),r=localStorage.getItem("selectedlist");if(e.target.checked){n.classList.add("strikethrough");for(let e=0;e<t.length;e+=1)if(t[e].list===r){g(t,e,o);break}}else{n.classList.remove("strikethrough");for(let e=0;e<t.length;e+=1)if(t[e].list===r){f(t,e,o);break}}},r=(e,r,i,s,a=1)=>{const l=document.createElement("tr");l.setAttribute("id",`task${i}`),l.setAttribute("class","text-center");const c=e[r].todos[i],d=document.createElement("th");if(1===a){l.appendChild(d);const e=document.createElement("input");e.addEventListener("click",o),d.appendChild(e),e.setAttribute("scope","row"),e.setAttribute("type","checkbox"),e.setAttribute("class","form-check-input taskdone"),c.status&&(e.checked=!0)}const u=document.createElement("td");l.appendChild(u),u.innerHTML=c.task;const m=document.createElement("td");l.appendChild(m),m.innerHTML=c.description;const p=document.createElement("td");l.appendChild(p),p.innerHTML=c.date;const h=document.createElement("td");if(h.innerHTML=c.priority,l.appendChild(h),1===a){const e=document.createElement("td");l.appendChild(e);const o=document.createElement("button");o.addEventListener("click",n),e.appendChild(o),o.setAttribute("class","btn btn-primary edittask"),o.innerHTML="Edit";const r=document.createElement("td");l.appendChild(r);const i=document.createElement("button");i.addEventListener("click",t),r.appendChild(i),i.setAttribute("class","btn btn-danger deltask"),i.innerHTML="Delete",c.status&&l.classList.add("strikethrough")}s.appendChild(l)},i=()=>{if(localStorage.getItem("selectedlist")){for(;x.lastElementChild;)x.removeChild(x.lastChild);const e=document.createElement("h4");x.appendChild(e),e.setAttribute("class","text-center text-dark mb-4"),e.innerHTML=localStorage.selectedlist,(e=>{A.classList.remove("d-none");const t=p(),n=document.createElement("table");x.appendChild(n),n.setAttribute("class","table table-stripped text-dark container pt-5");const o=document.createElement("thead"),i=document.createElement("tr");o.setAttribute("class","text-center"),i.innerHTML='  <th scope="column">Status</th>\n                    <th>Task</th>\n                    <th>Description</th>\n                    <th>Date</th>\n                    <th>Priority</th> \n                    <th>Update</th>\n                    <th>Remove</th>',o.appendChild(i),n.appendChild(o);const s=document.createElement("tbody");n.appendChild(s);for(let n=0;n<t.length;n+=1)if(t[n].list===e)for(let e=0;e<t[n].todos.length;e+=1)r(t,n,e,s)})(localStorage.getItem("selectedlist"))}},s=e=>{const t=e.target.textContent.trim();localStorage.setItem("selectedlist",t),i()},a=e=>{for(A.classList.add("d-none");x.lastElementChild;)x.removeChild(x.lastChild);const t=document.createElement("h4");x.appendChild(t),t.setAttribute("class","text-center text-dark mb-4"),t.innerHTML=e.target.textContent.trim(),localStorage.removeItem("selectedlist"),(e=>{const t=p(),n=document.createElement("table");x.appendChild(n),n.setAttribute("class","table table-stripped text-dark container pt-5");const o=document.createElement("thead");n.appendChild(o);const i=document.createElement("tr");o.setAttribute("class","text-center"),o.appendChild(i),i.innerHTML='  <th scope="column">Task</th>\n    <th scope="column">Description</th>\n                    <th>Date</th>\n                    <th>Priority</th> \n            ';const s=document.createElement("tbody");n.appendChild(s);for(let n=0;n<t.length;n+=1)for(let o=0;o<t[n].todos.length;o+=1){const i=t[n].todos[o].date,{status:a}=t[n].todos[o],l=new Date(i),c=(new Date-l)/864e5;("Tomorrow - [View-Only]"===e&&c<0&&c>-1.1&&!1===a||"Today - [View-Only]"===e&&c>=0&&c<=1&&!1===a)&&r(t,n,o,s,e)}})(e.target.textContent.trim())};w.addEventListener("click",s),T.addEventListener("click",a),M.addEventListener("click",a),i(),(()=>{if(localStorage.getItem("liststore")){const t=JSON.parse(localStorage.liststore),n=document.querySelector("#listoftodos");for(let o=1;o<t.length;o+=1){const r=document.createElement("a");r.setAttribute("href","#"),r.setAttribute("class","d-flex my-2 justify-content-center nodec");const i=document.createElement("h5");r.appendChild(i),i.addEventListener("click",s),i.setAttribute("id",`projectlist${o}`),i.setAttribute("class","text-white p-2 w-50 text-center listoflist"),i.innerHTML=`\n                     ${t[o].list} \n                  \n                    `;const a=document.createElement("button");a.addEventListener("click",e),r.appendChild(a),a.setAttribute("class","btn btn-danger  btn-sm"),a.innerHTML="Delete",n.appendChild(r)}}})()};U(),(()=>{const e=[];if(!localStorage.getItem("liststore")){const t=new v(s.textContent);e.push(t),localStorage.setItem("liststore",JSON.stringify(e))}r.addEventListener("submit",y),a.addEventListener("submit",E),i.addEventListener("submit",S),a.reset(),r.reset()})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvbGlzdC8uL3NyYy9zdHlsZXNoZWV0LnNjc3MiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG9saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9zcmMvc3R5bGVzaGVldC5zY3NzP2RkMzciLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9zcmMvbG9naWMuanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9zcmMvZG9tLmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIk9iamVjdCIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfcyIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsInByb3RvdHlwZSIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJtZW1vIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJiaW5kIiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJsaXN0Zm9ybSIsImVkaXRmb3JtIiwibGlzdG5hbWUiLCJmb3JtZGlzcGxheSIsImdldEVsZW1lbnRCeUlkIiwicmVhZFJhZGlvczEiLCJxdWVyeVNlbGVjdG9yQWxsIiwidGFzayIsImRlc2NyaXB0aW9uIiwiZGF0ZSIsImxvY2Fsc3RvcmFnZTEiLCJsaXN0c3Rhc2tzIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInBhcnNlIiwibGlzdHN0b3JlIiwiZGVsZXRldGFza2xvZ2ljIiwibGlzdHRhc2tzIiwidG9kb3MiLCJzZXRJdGVtIiwibG9jYXRpb24iLCJyZWxvYWQiLCJjaGVja2JveGZhbHNlIiwic3RhdHVzIiwiY2hlY2tib3h0cnVlIiwiQ3JlYXRlbGlzdDEiLCJDcmVhdGV0YXNrMSIsInJlYWRyYWRpb3ZhbHVlMSIsInByaW9yaXR5IiwiY3JlYXRlbGlzdCIsImxpc3QxIiwicHJldmVudERlZmF1bHQiLCJlZGl0dGFza2Zvcm0iLCJyZWFkcmFkaW92YWx1ZTIiLCJjaGVja2VkIiwic2VsZWN0ZWRpdGVtIiwiZG9tIiwiY3JlYXRldGFzayIsInRhc2tzIiwic2VsZWN0ZWRsaXN0IiwiZm9ybUJ0biIsInNob3dGb3JtIiwidGFza2J0biIsInNob3dsaXN0IiwicmVmcmVzaGxpc3QiLCJjb250ZW50MSIsImRlZmF1bHRsaXN0aG9tZSIsImRlZmF1bHR0b21ob21lIiwiZGVmYXVsdHRvZGF5aG9tZSIsInJlYWRSYWRpb3MxZWRpdCIsInRhc2tlZGl0IiwiZGVzY3JpcHRpb25lZGl0IiwiZGF0ZWVkaXQiLCJjYW5jZWxlZGl0dGFzayIsImNhbmNlbGxpc3QiLCJlZGl0aW5nZm9ybSIsImNhbmNlbGNyZWF0ZXRhc2siLCJhZGRFdmVudExpc3RlbmVyIiwiY2xhc3NMaXN0IiwiYWRkIiwiY29udGFpbnMiLCIkIiwibW9kYWwiLCJyZW1vdmVJdGVtIiwibGFzdEVsZW1lbnRDaGlsZCIsImxhc3RDaGlsZCIsImRlbGV0ZWxpc3QiLCJldmVudCIsInByZXZpb3VzU2libGluZyIsInBhcmVudEVsZW1lbnQiLCJpbm5lckhUTUwiLCJ0cmltIiwiZGVsZXRldGFzayIsImVkaXR0YXNrIiwiY3VycmVudHRhc2tuYW1lIiwiY2hlY2tib3h0YXNrIiwiY3VycmVudGNoZWNrZWR0YXNrY2xhc3MiLCJzaG93YWxsdGFza3MiLCJqIiwidGFibGVib2R5IiwidGFibGVyb3ciLCJ2YXJuZXciLCJ0ZDEiLCJjaGVja2JveCIsInRkMiIsInRkMjMiLCJ0ZDMiLCJ0ZDQiLCJ0ZDUiLCJlZGl0YnV0dG9uIiwidGQ2IiwiZGVsYnV0dG9uIiwic2hvd2xpc3RuYW1lIiwidGFibGUiLCJ0YWJsZWhlYWQiLCJ0YWJsZWhlYWRpbmciLCJzaG93dGFza2xpc3QiLCJhZGR0b2xpc3QiLCJjdXJyZW50TGlzdCIsInRleHRDb250ZW50IiwidG9tdG9kYXlkZWZhdWx0bGlzdCIsImRhdGUxIiwiRGF0ZSIsImZpbmFsZGF0ZSIsInRvZGF5dG9tb2xpc3QiLCJsaXN0cyIsImxpbmsiLCJsaXN0ZGVsYnRuIiwiZGlzcGxheWxpc3QiLCJsaXN0ZGVmYXVsdCIsInJlc2V0IiwibG9naWMiXSwibWFwcGluZ3MiOiJ1RkFHSUEsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSxnUEFBaVAsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsbUNBQW1DLE1BQVEsR0FBRyxTQUFXLDhHQUE4RyxlQUFpQixDQUFDLHVYQUF5WCxXQUFhLE1BRXAzQixXLFFDQ0FELEVBQU9FLFFBQVUsU0FBVUMsR0FDekIsSUFBSUMsRUFBTyxHQXVEWCxPQXJEQUEsRUFBS0MsU0FBVyxXQUNkLE9BQU9DLEtBQUtDLEtBQUksU0FBVUMsR0FDeEIsSUFBSUMsRUFBVU4sRUFBdUJLLEdBRXJDLE9BQUlBLEVBQUssR0FDQSxVQUFVRSxPQUFPRixFQUFLLEdBQUksTUFBTUUsT0FBT0QsRUFBUyxLQUdsREEsS0FDTkUsS0FBSyxLQUtWUCxFQUFLUSxFQUFJLFNBQVVDLEVBQVNDLEVBQVlDLEdBQ2YsaUJBQVpGLElBRVRBLEVBQVUsQ0FBQyxDQUFDLEtBQU1BLEVBQVMsTUFHN0IsSUFBSUcsRUFBeUIsR0FFN0IsR0FBSUQsRUFDRixJQUFLLElBQUlILEVBQUksRUFBR0EsRUFBSU4sS0FBS1csT0FBUUwsSUFBSyxDQUVwQyxJQUFJWCxFQUFLSyxLQUFLTSxHQUFHLEdBRVAsTUFBTlgsSUFDRmUsRUFBdUJmLElBQU0sR0FLbkMsSUFBSyxJQUFJaUIsRUFBSyxFQUFHQSxFQUFLTCxFQUFRSSxPQUFRQyxJQUFNLENBQzFDLElB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WXNELGlCQUFpQixTQUFVcEIsR0FDdkNwQyxFQUFTd0QsaUJBQWlCLFNBQVV6QixHQUNwQzdCLEVBQVkyRyxRQUNaOUcsRUFBUzhHLFNFaklYQyxJIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5tYWlue21pbi1oZWlnaHQ6Y2FsYygxMDB2aCAtIDQ5LjZweCl9Lm5vZGVjOmhvdmVye3RleHQtZGVjb3JhdGlvbjpub25lfWE6aG92ZXIgaDU6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojMzc4MDYxO2JvcmRlci1yYWRpdXM6MTBweDtwYWRkaW5nOjNweCAwO3RleHQtZGVjb3JhdGlvbjpub25lfS5zdHJpa2V0aHJvdWdoe3RleHQtZGVjb3JhdGlvbjpsaW5lLXRocm91Z2g7dGV4dC1zaGFkb3c6MCAwIDhweCAjNDQ0fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXNoZWV0LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUEsTUFDRSwrQkFBQSxDQUdGLGFBQ0Usb0JBQUEsQ0FHRixpQkFDRSx3QkFBQSxDQUdBLGtCQUFBLENBQ0EsYUFBQSxDQUNBLG9CQUFBLENBR0YsZUFDRSw0QkFBQSxDQUNBLHdCQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8vIEBpbXBvcnQgXFxcImJvb3RzdHJhcFxcXCI7XFxuXFxuLm1haW4ge1xcbiAgbWluLWhlaWdodDogY2FsYygxMDB2aCAtIDQ5LjZweCk7XFxufVxcblxcbi5ub2RlYzpob3ZlciB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbmE6aG92ZXIgaDU6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDU1LCAxMjgsIDk3KTtcXG5cXG4gIC8qIGN1cnNvcjogcG9pbnRlcjsgKi9cXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICBwYWRkaW5nOiAzcHggMDtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuLnN0cmlrZXRocm91Z2gge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XFxuICB0ZXh0LXNoYWRvdzogMCAwIDhweCAjNDQ0O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzaGVldC5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0ICogYXMgZG9tMSBmcm9tICcuL2RvbSc7XG5cbmNvbnN0IGxpc3Rmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2xpc3QtZGlzcGxheScpO1xuY29uc3QgZWRpdGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZWRpdC1mb3JtLWRpc3BsYXknKTtcbmNvbnN0IGxpc3RuYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2RlZmF1bHRsaXN0Jyk7XG5jb25zdCBmb3JtZGlzcGxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmb3JtLWRpc3BsYXknKTtcbmNvbnN0IGxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGlzdCcpO1xuY29uc3QgcmVhZFJhZGlvczEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucmFkaW9idG4nKTtcbmNvbnN0IHRhc2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGFzaycpO1xuY29uc3QgZGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGVzY3JpcHRpb24nKTtcbmNvbnN0IGRhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZGF0ZScpO1xuXG5leHBvcnQgY29uc3QgbG9jYWxzdG9yYWdlMSA9ICgpID0+IHtcbiAgbGV0IGxpc3RzdGFza3MgPSBbXTtcbiAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsaXN0c3RvcmUnKSkge1xuICAgIGxpc3RzdGFza3MgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5saXN0c3RvcmUpO1xuICB9XG4gIHJldHVybiBsaXN0c3Rhc2tzO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlbGV0ZXRhc2tsb2dpYyA9IChpLCByZW1vdmUsIGxpc3R0YXNrcykgPT4ge1xuICBsaXN0dGFza3NbaV0udG9kb3Muc3BsaWNlKHJlbW92ZSwgMSk7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsaXN0c3RvcmUnLCBKU09OLnN0cmluZ2lmeShsaXN0dGFza3MpKTtcbiAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGNoZWNrYm94ZmFsc2UgPSAobGlzdHRhc2tzLCBpLCByZW1vdmUpID0+IHtcbiAgbGlzdHRhc2tzW2ldLnRvZG9zW3JlbW92ZV0uc3RhdHVzID0gZmFsc2U7XG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsaXN0c3RvcmUnLCBKU09OLnN0cmluZ2lmeShsaXN0dGFza3MpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjaGVja2JveHRydWUgPSAobGlzdHRhc2tzLCBpLCByZW1vdmUpID0+IHtcbiAgbGlzdHRhc2tzW2ldLnRvZG9zW3JlbW92ZV0uc3RhdHVzID0gdHJ1ZTtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xpc3RzdG9yZScsIEpTT04uc3RyaW5naWZ5KGxpc3R0YXNrcykpO1xufTtcblxuZXhwb3J0IGNsYXNzIENyZWF0ZWxpc3QxIHtcbiAgY29uc3RydWN0b3IobGlzdCkge1xuICAgIHRoaXMubGlzdCA9IGxpc3Q7XG4gICAgdGhpcy50b2RvcyA9IFtdO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGV0YXNrMShkYXRlLCB0YXNrLCBkZXNjcmlwdGlvbiwgcmVhZHJhZGlvdmFsdWUxLCBzdGF0dXMpIHtcbiAgdGhpcy5kYXRlID0gZGF0ZTtcbiAgdGhpcy50YXNrID0gdGFzaztcbiAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICB0aGlzLnByaW9yaXR5ID0gcmVhZHJhZGlvdmFsdWUxO1xuICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZWxpc3QgPSAoZSkgPT4ge1xuICBjb25zdCBsaXN0c3Rhc2tzID0gbG9jYWxzdG9yYWdlMSgpO1xuICBjb25zdCBsaXN0MSA9IG5ldyBDcmVhdGVsaXN0MShsaXN0LnZhbHVlKTtcbiAgbGlzdHN0YXNrcy5wdXNoKGxpc3QxKTtcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xpc3RzdG9yZScsIEpTT04uc3RyaW5naWZ5KGxpc3RzdGFza3MpKTtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG59O1xuXG5leHBvcnQgY29uc3QgZWRpdHRhc2tmb3JtID0gKGUpID0+IHtcbiAgY29uc3QgbGlzdHRhc2tzID0gbG9jYWxzdG9yYWdlMSgpO1xuXG4gIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2VsZWN0ZWRsaXN0JykpIHtcbiAgICBsZXQgcmVhZHJhZGlvdmFsdWUyO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBpZiAoZG9tMS5yZWFkUmFkaW9zMWVkaXRbaV0uY2hlY2tlZCA9PT0gdHJ1ZSkge1xuICAgICAgICByZWFkcmFkaW92YWx1ZTIgPSBkb20xLnJlYWRSYWRpb3MxZWRpdFtpXS52YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2VsZWN0ZWRpdGVtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NlbGVjdGVkbGlzdCcpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0dGFza3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChsaXN0dGFza3NbaV0ubGlzdCA9PT0gc2VsZWN0ZWRpdGVtKSB7XG4gICAgICAgIGNvbnN0IHJlbW92ZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZWxlY3RlZHRhc2snKTtcbiAgICAgICAgbGlzdHRhc2tzW2ldLnRvZG9zW3JlbW92ZV0udGFzayA9IGRvbTEudGFza2VkaXQudmFsdWU7XG4gICAgICAgIGxpc3R0YXNrc1tpXS50b2Rvc1tyZW1vdmVdLmRhdGUgPSBkb20xLmRhdGVlZGl0LnZhbHVlO1xuICAgICAgICBsaXN0dGFza3NbaV0udG9kb3NbcmVtb3ZlXS5kZXNjcmlwdGlvbiA9IGRvbTEuZGVzY3JpcHRpb25lZGl0LnZhbHVlO1xuICAgICAgICBsaXN0dGFza3NbaV0udG9kb3NbcmVtb3ZlXS5wcmlvcml0eSA9IHJlYWRyYWRpb3ZhbHVlMjtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xpc3RzdG9yZScsIEpTT04uc3RyaW5naWZ5KGxpc3R0YXNrcykpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgZG9tMS5kb20oKTtcbiAgfVxuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGV0YXNrID0gKGUpID0+IHtcbiAgY29uc3QgbGlzdHRhc2tzID0gbG9jYWxzdG9yYWdlMSgpO1xuXG4gIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2VsZWN0ZWRsaXN0JykpIHtcbiAgICBsZXQgcmVhZHJhZGlvdmFsdWUxO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBpZiAocmVhZFJhZGlvczFbaV0uY2hlY2tlZCA9PT0gdHJ1ZSkge1xuICAgICAgICByZWFkcmFkaW92YWx1ZTEgPSByZWFkUmFkaW9zMVtpXS52YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgdGFza3MgPSBuZXcgQ3JlYXRldGFzazEoZGF0ZS52YWx1ZSwgdGFzay52YWx1ZSwgZGVzY3JpcHRpb24udmFsdWUsXG4gICAgICByZWFkcmFkaW92YWx1ZTEsIGZhbHNlKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdHRhc2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBzZWxlY3RlZGxpc3QgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2VsZWN0ZWRsaXN0Jyk7XG5cbiAgICAgIGlmIChsaXN0dGFza3NbaV0ubGlzdCA9PT0gc2VsZWN0ZWRsaXN0KSB7XG4gICAgICAgIGxpc3R0YXNrc1tpXS50b2Rvcy5wdXNoKHRhc2tzKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xpc3RzdG9yZScsIEpTT04uc3RyaW5naWZ5KGxpc3R0YXNrcykpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgbG9naWMgPSAoKSA9PiB7XG4gIGNvbnN0IGxpc3RzdGFza3MgPSBbXTtcblxuICBpZiAoIWxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsaXN0c3RvcmUnKSkge1xuICAgIGNvbnN0IGxpc3RkZWZhdWx0ID0gbmV3IENyZWF0ZWxpc3QxKGxpc3RuYW1lLnRleHRDb250ZW50KTtcbiAgICBsaXN0c3Rhc2tzLnB1c2gobGlzdGRlZmF1bHQpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsaXN0c3RvcmUnLCBKU09OLnN0cmluZ2lmeShsaXN0c3Rhc2tzKSk7XG4gIH1cblxuICBsaXN0Zm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCBjcmVhdGVsaXN0KTtcbiAgZm9ybWRpc3BsYXkuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgY3JlYXRldGFzayk7XG4gIGVkaXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGVkaXR0YXNrZm9ybSk7XG4gIGZvcm1kaXNwbGF5LnJlc2V0KCk7XG4gIGxpc3Rmb3JtLnJlc2V0KCk7XG59OyIsImltcG9ydCB7XG4gIGxvY2Fsc3RvcmFnZTEsIGRlbGV0ZXRhc2tsb2dpYywgY2hlY2tib3h0cnVlLCBjaGVja2JveGZhbHNlLFxufSBmcm9tICcuL2xvZ2ljJztcblxuY29uc3QgZm9ybUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmb3JtLWJ0bicpO1xuY29uc3Qgc2hvd0Zvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZm9ybS1kaXNwbGF5Jyk7XG5jb25zdCB0YXNrYnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Rhc2stYnRuJyk7XG5jb25zdCBzaG93bGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsaXN0LWRpc3BsYXknKTtcbmNvbnN0IHJlZnJlc2hsaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3JlZnJlc2gtYnRuJyk7XG5leHBvcnQgY29uc3QgbGlzdG9mbGlzdDEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubGlzdG9mbGlzdCcpO1xuY29uc3QgY29udGVudDEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3VycmVudGNsYXNzbmFtZScpO1xuY29uc3QgZGVmYXVsdGxpc3Rob21lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RlZmF1bHRsaXN0Jyk7XG5jb25zdCBkZWZhdWx0dG9taG9tZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b21tb3Jyb3dsaXN0Jyk7XG5jb25zdCBkZWZhdWx0dG9kYXlob21lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvZGF5bGlzdCcpO1xuZXhwb3J0IGNvbnN0IHJlYWRSYWRpb3MxZWRpdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5yYWRpb2J0bmVkaXQnKTtcbmV4cG9ydCBjb25zdCB0YXNrZWRpdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrZWRpdCcpO1xuZXhwb3J0IGNvbnN0IGRlc2NyaXB0aW9uZWRpdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXNjcmlwdGlvbmVkaXQnKTtcbmV4cG9ydCBjb25zdCBkYXRlZWRpdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkYXRlZWRpdCcpO1xuY29uc3QgY2FuY2VsZWRpdHRhc2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FuY2VsZWRpdHRhc2snKTtcbmNvbnN0IGNhbmNlbGxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FuY2VsbGlzdCcpO1xuY29uc3QgZWRpdGluZ2Zvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWRpdGluZ2Zvcm0nKTtcbmNvbnN0IGNhbmNlbGNyZWF0ZXRhc2sgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FuY2VsY3JlYXRldGFzaycpO1xuY29uc3QgZm9ybWRpc3BsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9ybS1kaXNwbGF5Jyk7XG5cbmV4cG9ydCBjb25zdCBkb20gPSAoKSA9PiB7XG4gIGNhbmNlbGxpc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgc2hvd2xpc3QuY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XG4gIH0pO1xuXG4gIGNhbmNlbGVkaXR0YXNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGVkaXRpbmdmb3JtLmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xuICB9KTtcblxuICBjYW5jZWxjcmVhdGV0YXNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGZvcm1kaXNwbGF5LmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xuICB9KTtcblxuICBmb3JtQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2VsZWN0ZWRsaXN0JykpIHtcbiAgICAgIGlmIChzaG93Rm9ybS5jbGFzc0xpc3QuY29udGFpbnMoJ2Qtbm9uZScpKSB7XG4gICAgICAgIHNob3dGb3JtLmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2hvd0Zvcm0uY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qZXNsaW50LWRpc2FibGUgKi9cbiAgICAgICQoJyNteU1vZGFsJykubW9kYWwoJ3Nob3cnKTtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgICB9XG4gIH0pO1xuXG4gIHRhc2tidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgaWYgKHNob3dsaXN0LmNsYXNzTGlzdC5jb250YWlucygnZC1ub25lJykpIHtcbiAgICAgIHNob3dsaXN0LmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG93bGlzdC5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJlZnJlc2hsaXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2VsZWN0ZWRsaXN0JykpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdzZWxlY3RlZGxpc3QnKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdzZWxlY3RlZHRhc2snKTtcblxuICAgICAgd2hpbGUgKGNvbnRlbnQxLmxhc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgICAgY29udGVudDEucmVtb3ZlQ2hpbGQoY29udGVudDEubGFzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IGRlbGV0ZWxpc3QgPSAoZXZlbnQpID0+IHtcbiAgICBsZXQgcmVtb3ZlID0gZXZlbnQudGFyZ2V0LnByZXZpb3VzU2libGluZy5pZDtcbiAgICByZW1vdmUgPSByZW1vdmUuc2xpY2UoLTEpO1xuXG4gICAgY29uc3QgbGlzdHN0YXNrcyA9IGxvY2Fsc3RvcmFnZTEoKTtcbiAgICBsaXN0c3Rhc2tzLnNwbGljZShyZW1vdmUsIDEpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsaXN0c3RvcmUnLCBKU09OLnN0cmluZ2lmeShsaXN0c3Rhc2tzKSk7XG4gICAgZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQucmVtb3ZlKCk7XG4gICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZWxlY3RlZGxpc3QnKSA9PT0gZXZlbnQudGFyZ2V0LnByZXZpb3VzU2libGluZy5pbm5lckhUTUwudHJpbSgpKSB7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnc2VsZWN0ZWRsaXN0Jyk7XG4gICAgICB3aGlsZSAoY29udGVudDEubGFzdEVsZW1lbnRDaGlsZCkge1xuICAgICAgICBjb250ZW50MS5yZW1vdmVDaGlsZChjb250ZW50MS5sYXN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBkZWxldGV0YXNrID0gKGUpID0+IHtcbiAgICBjb25zdCBsaXN0dGFza3MgPSBsb2NhbHN0b3JhZ2UxKCk7XG4gICAgY29uc3Qgc2VsZWN0ZWRpdGVtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NlbGVjdGVkbGlzdCcpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0dGFza3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChsaXN0dGFza3NbaV0ubGlzdCA9PT0gc2VsZWN0ZWRpdGVtKSB7XG4gICAgICAgIGxldCByZW1vdmUgPSBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuaWQ7XG4gICAgICAgIHJlbW92ZSA9IHJlbW92ZS5zbGljZSgtMSk7XG4gICAgICAgIGRlbGV0ZXRhc2tsb2dpYyhpLCByZW1vdmUsIGxpc3R0YXNrcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQucmVtb3ZlKCk7XG4gIH07XG5cbiAgY29uc3QgZWRpdHRhc2sgPSAoZSkgPT4ge1xuICAgIGlmIChlZGl0aW5nZm9ybS5jbGFzc0xpc3QuY29udGFpbnMoJ2Qtbm9uZScpKSB7XG4gICAgICBjb25zdCBjdXJyZW50dGFza25hbWUgPSBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuaWQuc2xpY2UoLTEpO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3NlbGVjdGVkdGFzaycsIGN1cnJlbnR0YXNrbmFtZSk7XG4gICAgICBlZGl0aW5nZm9ybS5jbGFzc0xpc3QucmVtb3ZlKCdkLW5vbmUnKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICAgIGlmIChyZWFkUmFkaW9zMWVkaXRbaV0udmFsdWUgPT09IGUudGFyZ2V0LnBhcmVudEVsZW1lbnQucHJldmlvdXNTaWJsaW5nLmlubmVySFRNTCkge1xuICAgICAgICAgIHJlYWRSYWRpb3MxZWRpdFtpXS5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGFza2VkaXQudmFsdWUgPSBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnByZXZpb3VzU2libGluZy5wcmV2aW91c1NpYmxpbmdcbiAgICAgICAgLnByZXZpb3VzU2libGluZy5wcmV2aW91c1NpYmxpbmcuaW5uZXJIVE1MO1xuICAgICAgZGVzY3JpcHRpb25lZGl0LnZhbHVlID0gZS50YXJnZXQucGFyZW50RWxlbWVudC5wcmV2aW91c1NpYmxpbmcucHJldmlvdXNTaWJsaW5nLnByZXZpb3VzU2libGluZ1xuICAgICAgICAuaW5uZXJIVE1MO1xuICAgICAgZGF0ZWVkaXQudmFsdWUgPSBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnByZXZpb3VzU2libGluZy5wcmV2aW91c1NpYmxpbmcuaW5uZXJIVE1MO1xuICAgIH0gZWxzZSB7XG4gICAgICBlZGl0aW5nZm9ybS5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdzZWxlY3RlZHRhc2snKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY2hlY2tib3h0YXNrID0gKGUpID0+IHtcbiAgICBjb25zdCBsaXN0dGFza3MgPSBsb2NhbHN0b3JhZ2UxKCk7XG4gICAgY29uc3QgY3VycmVudGNoZWNrZWR0YXNrY2xhc3MgPSBlLnRhcmdldC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgY29uc3QgcmVtb3ZlID0gY3VycmVudGNoZWNrZWR0YXNrY2xhc3MuaWQuc2xpY2UoLTEpO1xuICAgIGNvbnN0IHNlbGVjdGVkaXRlbSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZWxlY3RlZGxpc3QnKTtcblxuICAgIGlmIChlLnRhcmdldC5jaGVja2VkKSB7XG4gICAgICBjdXJyZW50Y2hlY2tlZHRhc2tjbGFzcy5jbGFzc0xpc3QuYWRkKCdzdHJpa2V0aHJvdWdoJyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3R0YXNrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAobGlzdHRhc2tzW2ldLmxpc3QgPT09IHNlbGVjdGVkaXRlbSkge1xuICAgICAgICAgIGNoZWNrYm94dHJ1ZShsaXN0dGFza3MsIGksIHJlbW92ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudGNoZWNrZWR0YXNrY2xhc3MuY2xhc3NMaXN0LnJlbW92ZSgnc3RyaWtldGhyb3VnaCcpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0dGFza3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGxpc3R0YXNrc1tpXS5saXN0ID09PSBzZWxlY3RlZGl0ZW0pIHtcbiAgICAgICAgICBjaGVja2JveGZhbHNlKGxpc3R0YXNrcywgaSwgcmVtb3ZlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBzaG93YWxsdGFza3MgPSAobGlzdHRhc2tzLCBpLCBqLCB0YWJsZWJvZHksIG5hbWUgPSAxKSA9PiB7XG4gICAgY29uc3QgdGFibGVyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgIHRhYmxlcm93LnNldEF0dHJpYnV0ZSgnaWQnLCBgdGFzayR7an1gKTtcbiAgICB0YWJsZXJvdy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3RleHQtY2VudGVyJyk7XG4gICAgY29uc3QgdmFybmV3ID0gbGlzdHRhc2tzW2ldLnRvZG9zW2pdO1xuICAgIGNvbnN0IHRkMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG4gICAgaWYgKG5hbWUgPT09IDEpIHtcbiAgICAgIHRhYmxlcm93LmFwcGVuZENoaWxkKHRkMSk7XG4gICAgICBjb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICBjaGVja2JveC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNoZWNrYm94dGFzayk7XG4gICAgICB0ZDEuYXBwZW5kQ2hpbGQoY2hlY2tib3gpO1xuICAgICAgY2hlY2tib3guc2V0QXR0cmlidXRlKCdzY29wZScsICdyb3cnKTtcbiAgICAgIGNoZWNrYm94LnNldEF0dHJpYnV0ZSgndHlwZScsICdjaGVja2JveCcpO1xuICAgICAgY2hlY2tib3guc2V0QXR0cmlidXRlKCdjbGFzcycsICdmb3JtLWNoZWNrLWlucHV0IHRhc2tkb25lJyk7XG4gICAgICBpZiAodmFybmV3LnN0YXR1cykgeyBjaGVja2JveC5jaGVja2VkID0gdHJ1ZTsgfVxuICAgIH1cbiAgICBjb25zdCB0ZDIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgIHRhYmxlcm93LmFwcGVuZENoaWxkKHRkMik7XG4gICAgdGQyLmlubmVySFRNTCA9IHZhcm5ldy50YXNrO1xuICAgIGNvbnN0IHRkMjMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgIHRhYmxlcm93LmFwcGVuZENoaWxkKHRkMjMpO1xuICAgIHRkMjMuaW5uZXJIVE1MID0gdmFybmV3LmRlc2NyaXB0aW9uO1xuICAgIGNvbnN0IHRkMyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgdGFibGVyb3cuYXBwZW5kQ2hpbGQodGQzKTtcbiAgICB0ZDMuaW5uZXJIVE1MID0gdmFybmV3LmRhdGU7XG4gICAgY29uc3QgdGQ0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICB0ZDQuaW5uZXJIVE1MID0gdmFybmV3LnByaW9yaXR5O1xuICAgIHRhYmxlcm93LmFwcGVuZENoaWxkKHRkNCk7XG4gICAgaWYgKG5hbWUgPT09IDEpIHtcbiAgICAgIGNvbnN0IHRkNSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICB0YWJsZXJvdy5hcHBlbmRDaGlsZCh0ZDUpO1xuICAgICAgY29uc3QgZWRpdGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgZWRpdGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGVkaXR0YXNrKTtcblxuICAgICAgdGQ1LmFwcGVuZENoaWxkKGVkaXRidXR0b24pO1xuXG4gICAgICBlZGl0YnV0dG9uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnYnRuIGJ0bi1wcmltYXJ5IGVkaXR0YXNrJyk7XG4gICAgICBlZGl0YnV0dG9uLmlubmVySFRNTCA9ICdFZGl0JztcbiAgICAgIGNvbnN0IHRkNiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICB0YWJsZXJvdy5hcHBlbmRDaGlsZCh0ZDYpO1xuICAgICAgY29uc3QgZGVsYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICBkZWxidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkZWxldGV0YXNrKTtcbiAgICAgIHRkNi5hcHBlbmRDaGlsZChkZWxidXR0b24pO1xuICAgICAgZGVsYnV0dG9uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnYnRuIGJ0bi1kYW5nZXIgZGVsdGFzaycpO1xuICAgICAgZGVsYnV0dG9uLmlubmVySFRNTCA9ICdEZWxldGUnO1xuICAgICAgaWYgKHZhcm5ldy5zdGF0dXMpIHtcbiAgICAgICAgdGFibGVyb3cuY2xhc3NMaXN0LmFkZCgnc3RyaWtldGhyb3VnaCcpO1xuICAgICAgfVxuICAgIH1cbiAgICB0YWJsZWJvZHkuYXBwZW5kQ2hpbGQodGFibGVyb3cpO1xuICB9O1xuXG4gIGNvbnN0IHNob3d0YXNrbGlzdCA9IChzZWxlY3RlZGl0ZW0pID0+IHtcbiAgICBmb3JtQnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xuXG4gICAgY29uc3QgbGlzdHRhc2tzID0gbG9jYWxzdG9yYWdlMSgpO1xuICAgIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcbiAgICBjb250ZW50MS5hcHBlbmRDaGlsZCh0YWJsZSk7XG4gICAgdGFibGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICd0YWJsZSB0YWJsZS1zdHJpcHBlZCB0ZXh0LWRhcmsgY29udGFpbmVyIHB0LTUnKTtcbiAgICBjb25zdCB0YWJsZWhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aGVhZCcpO1xuICAgIGNvbnN0IHRhYmxlaGVhZGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgdGFibGVoZWFkLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAndGV4dC1jZW50ZXInKTtcblxuICAgIHRhYmxlaGVhZGluZy5pbm5lckhUTUwgPSBgICA8dGggc2NvcGU9XCJjb2x1bW5cIj5TdGF0dXM8L3RoPlxuICAgICAgICAgICAgICAgICAgICA8dGg+VGFzazwvdGg+XG4gICAgICAgICAgICAgICAgICAgIDx0aD5EZXNjcmlwdGlvbjwvdGg+XG4gICAgICAgICAgICAgICAgICAgIDx0aD5EYXRlPC90aD5cbiAgICAgICAgICAgICAgICAgICAgPHRoPlByaW9yaXR5PC90aD4gXG4gICAgICAgICAgICAgICAgICAgIDx0aD5VcGRhdGU8L3RoPlxuICAgICAgICAgICAgICAgICAgICA8dGg+UmVtb3ZlPC90aD5gO1xuXG4gICAgdGFibGVoZWFkLmFwcGVuZENoaWxkKHRhYmxlaGVhZGluZyk7XG4gICAgdGFibGUuYXBwZW5kQ2hpbGQodGFibGVoZWFkKTtcblxuICAgIGNvbnN0IHRhYmxlYm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XG4gICAgdGFibGUuYXBwZW5kQ2hpbGQodGFibGVib2R5KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3R0YXNrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGxpc3R0YXNrc1tpXS5saXN0ID09PSBzZWxlY3RlZGl0ZW0pIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsaXN0dGFza3NbaV0udG9kb3MubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBzaG93YWxsdGFza3MobGlzdHRhc2tzLCBpLCBqLCB0YWJsZWJvZHkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHNob3dsaXN0bmFtZSA9ICgpID0+IHtcbiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NlbGVjdGVkbGlzdCcpKSB7XG4gICAgICB3aGlsZSAoY29udGVudDEubGFzdEVsZW1lbnRDaGlsZCkge1xuICAgICAgICBjb250ZW50MS5yZW1vdmVDaGlsZChjb250ZW50MS5sYXN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgY29uc3QgbGlzdG5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoNCcpO1xuICAgICAgY29udGVudDEuYXBwZW5kQ2hpbGQobGlzdG5hbWUpO1xuICAgICAgbGlzdG5hbWUuc2V0QXR0cmlidXRlKCdjbGFzcycsICd0ZXh0LWNlbnRlciB0ZXh0LWRhcmsgbWItNCcpO1xuICAgICAgbGlzdG5hbWUuaW5uZXJIVE1MID0gbG9jYWxTdG9yYWdlLnNlbGVjdGVkbGlzdDtcbiAgICAgIHNob3d0YXNrbGlzdChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2VsZWN0ZWRsaXN0JykpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBhZGR0b2xpc3QgPSAoZSkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRMaXN0ID0gZS50YXJnZXQudGV4dENvbnRlbnQudHJpbSgpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZWxlY3RlZGxpc3QnLCBjdXJyZW50TGlzdCk7XG4gICAgc2hvd2xpc3RuYW1lKCk7XG4gIH07XG5cbiAgY29uc3QgdG9kYXl0b21vbGlzdCA9IChuYW1lKSA9PiB7XG4gICAgY29uc3QgbGlzdHRhc2tzID0gbG9jYWxzdG9yYWdlMSgpO1xuICAgIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGFibGUnKTtcbiAgICBjb250ZW50MS5hcHBlbmRDaGlsZCh0YWJsZSk7XG4gICAgdGFibGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICd0YWJsZSB0YWJsZS1zdHJpcHBlZCB0ZXh0LWRhcmsgY29udGFpbmVyIHB0LTUnKTtcbiAgICBjb25zdCB0YWJsZWhlYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0aGVhZCcpO1xuICAgIHRhYmxlLmFwcGVuZENoaWxkKHRhYmxlaGVhZCk7XG5cbiAgICBjb25zdCB0YWJsZWhlYWRpbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgIHRhYmxlaGVhZC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3RleHQtY2VudGVyJyk7XG4gICAgdGFibGVoZWFkLmFwcGVuZENoaWxkKHRhYmxlaGVhZGluZyk7XG4gICAgdGFibGVoZWFkaW5nLmlubmVySFRNTCA9IGAgIDx0aCBzY29wZT1cImNvbHVtblwiPlRhc2s8L3RoPlxuICAgIDx0aCBzY29wZT1cImNvbHVtblwiPkRlc2NyaXB0aW9uPC90aD5cbiAgICAgICAgICAgICAgICAgICAgPHRoPkRhdGU8L3RoPlxuICAgICAgICAgICAgICAgICAgICA8dGg+UHJpb3JpdHk8L3RoPiBcbiAgICAgICAgICAgIGA7XG5cbiAgICBjb25zdCB0YWJsZWJvZHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xuICAgIHRhYmxlLmFwcGVuZENoaWxkKHRhYmxlYm9keSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0dGFza3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGlzdHRhc2tzW2ldLnRvZG9zLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGNvbnN0IHZhcm5ldyA9IGxpc3R0YXNrc1tpXS50b2Rvc1tqXS5kYXRlO1xuICAgICAgICBjb25zdCB7IHN0YXR1cyB9ID0gbGlzdHRhc2tzW2ldLnRvZG9zW2pdO1xuICAgICAgICBjb25zdCBkYXRlMSA9IG5ldyBEYXRlKHZhcm5ldyk7XG4gICAgICAgIGNvbnN0IGRhdGUyID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgZmluYWxkYXRlID0gKGRhdGUyIC0gZGF0ZTEpIC8gKDEwMDAgKiAzNjAwICogMjQpO1xuXG4gICAgICAgIGlmIChuYW1lID09PSAnVG9tb3Jyb3cgLSBbVmlldy1Pbmx5XScgJiYgKGZpbmFsZGF0ZSA8IDAgJiYgZmluYWxkYXRlID4gLTEuMTApICYmIHN0YXR1cyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBzaG93YWxsdGFza3MobGlzdHRhc2tzLCBpLCBqLCB0YWJsZWJvZHksIG5hbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdUb2RheSAtIFtWaWV3LU9ubHldJyAmJiAoZmluYWxkYXRlID49IDAgJiYgZmluYWxkYXRlIDw9IDEpICYmIHN0YXR1cyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBzaG93YWxsdGFza3MobGlzdHRhc2tzLCBpLCBqLCB0YWJsZWJvZHksIG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHRvbXRvZGF5ZGVmYXVsdGxpc3QgPSAoZSkgPT4ge1xuICAgIGZvcm1CdG4uY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XG5cbiAgICB3aGlsZSAoY29udGVudDEubGFzdEVsZW1lbnRDaGlsZCkge1xuICAgICAgY29udGVudDEucmVtb3ZlQ2hpbGQoY29udGVudDEubGFzdENoaWxkKTtcbiAgICB9XG4gICAgY29uc3QgbGlzdG5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoNCcpO1xuICAgIGNvbnRlbnQxLmFwcGVuZENoaWxkKGxpc3RuYW1lKTtcbiAgICBsaXN0bmFtZS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3RleHQtY2VudGVyIHRleHQtZGFyayBtYi00Jyk7XG4gICAgbGlzdG5hbWUuaW5uZXJIVE1MID0gZS50YXJnZXQudGV4dENvbnRlbnQudHJpbSgpO1xuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdzZWxlY3RlZGxpc3QnKTtcbiAgICBjb25zdCBuYW1lID0gZS50YXJnZXQudGV4dENvbnRlbnQudHJpbSgpO1xuICAgIHRvZGF5dG9tb2xpc3QobmFtZSk7XG4gIH07XG5cbiAgY29uc3QgZGlzcGxheWxpc3QgPSAoKSA9PiB7XG4gICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsaXN0c3RvcmUnKSkge1xuICAgICAgY29uc3QgbGlzdHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5saXN0c3RvcmUpO1xuXG4gICAgICBjb25zdCB0YWJsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsaXN0b2Z0b2RvcycpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxpc3RzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgJyMnKTtcbiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2QtZmxleCBteS0yIGp1c3RpZnktY29udGVudC1jZW50ZXIgbm9kZWMnKTtcbiAgICAgICAgY29uc3QgdGFibGVyb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoNScpO1xuICAgICAgICBsaW5rLmFwcGVuZENoaWxkKHRhYmxlcm93KTtcbiAgICAgICAgdGFibGVyb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhZGR0b2xpc3QpO1xuICAgICAgICB0YWJsZXJvdy5zZXRBdHRyaWJ1dGUoJ2lkJywgYHByb2plY3RsaXN0JHtpfWApO1xuXG4gICAgICAgIHRhYmxlcm93LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAndGV4dC13aGl0ZSBwLTIgdy01MCB0ZXh0LWNlbnRlciBsaXN0b2ZsaXN0Jyk7XG4gICAgICAgIHRhYmxlcm93LmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgICAgICAgICAgICR7bGlzdHNbaV0ubGlzdH0gXG4gICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgYDtcbiAgICAgICAgY29uc3QgbGlzdGRlbGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBsaXN0ZGVsYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGVsZXRlbGlzdCk7XG4gICAgICAgIGxpbmsuYXBwZW5kQ2hpbGQobGlzdGRlbGJ0bik7XG4gICAgICAgIGxpc3RkZWxidG4uc2V0QXR0cmlidXRlKCdjbGFzcycsICdidG4gYnRuLWRhbmdlciAgYnRuLXNtJyk7XG4gICAgICAgIGxpc3RkZWxidG4uaW5uZXJIVE1MID0gJ0RlbGV0ZSc7XG4gICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKGxpbmspO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBkZWZhdWx0bGlzdGhvbWUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhZGR0b2xpc3QpO1xuICBkZWZhdWx0dG9kYXlob21lLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9tdG9kYXlkZWZhdWx0bGlzdCk7XG4gIGRlZmF1bHR0b21ob21lLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9tdG9kYXlkZWZhdWx0bGlzdCk7XG5cbiAgc2hvd2xpc3RuYW1lKCk7XG5cbiAgZGlzcGxheWxpc3QoKTtcbn07XG4iLCJpbXBvcnQgJy4vc3R5bGVzaGVldC5zY3NzJztcbmltcG9ydCB7IGRvbSB9IGZyb20gJy4vZG9tJztcbmltcG9ydCB7IGxvZ2ljIH0gZnJvbSAnLi9sb2dpYyc7XG5cbmRvbSgpO1xubG9naWMoKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=